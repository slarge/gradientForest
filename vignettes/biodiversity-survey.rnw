\documentclass[a4paper,11pt]{article} %  Packages %%%%%%%%%%%%%%%%%%%%% 
\usepackage{natbib} 
\usepackage{pstricks} 
\usepackage{pst-tree} 
\usepackage{fullpage} 
\usepackage{color} 
\usepackage[T1]{fontenc} 
\usepackage{amsmath, amssymb, bm} 
\usepackage{graphicx} 
\usepackage{booktabs} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
\pagestyle{empty} 
%%%%%%%% Some bold maths characters supplied by package bm 
\newcommand{\bb}{\boldsymbol{\beta}} 
\newcommand{\bg}{\boldsymbol{\gamma}} 
\newcommand{\bx}{\mathbf{x}} 
\newcommand{\bz}{\mathbf{z}} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % 
\title{Example analysis of biodiversity survey data with R package \texttt{gradientForest}} 
\author{C. Roland Pitcher, Nick Ellis, Stephen J. Smith} 
% %%%%%%%%%%%%%% Start of document 
\begin{document} 
\maketitle% Generate title 
\tableofcontents% Generate table of contents 
% %% Setup for R 
<<c1, fig=FALSE,echo=FALSE,eval=TRUE>>= 
options(width=60) 
options(warn=-1) 
@
\setkeys{Gin}{width=\textwidth}
% \VignetteIndexEntry{Biodiversity example}

\section{Introduction} \label{sec:Introduction}

R package \texttt{gradientForest} \citep{Ellis2010} develops flexible non-parametric
functions to quantify multi-species compositional turnover along environmental 
gradients. The flexibility comes from the method's origins in Random Forests
\citep{Breiman2001}; specifically R package randomForest \citep{Liaw2002}. This
document provides an example to demonstrate the use of \texttt{gradientForest} for
ecological analysis of biodiversity survey data. A multi-regional application
is provided by \citep{Pitcher2010}. The document assumes some familiarity both
with R and with community analysis. The example has some analogues with
constrained ordination methods and with Generalized Dissimilarity Modelling
\citep{Ferrier2007}, which are both complementary. Package randomForest
includes functions for plotting non-linear responses in compositional along
environmental gradients, and for using these responses to transform
environmental data layers to biological scales. The transformed
multi-dimensional biological space can be represented as a biplot and can be
mapped in geographic space.

This example demonstrates typical scripts for a gradient forest analysis and
provides in the package a sites-by-species (row-by-columns) matrix and a
matching sites-by-environment (row-by-columns) dataframe. The number of rows
and their order must match between these two data objects. The data should not
include NAs. It is assumed that users will be familiar with the data-processing
steps necessary to produce such data objects. 

\section{Gradient Forest basics} 
\subsection{Data} 

The example data provided in package \texttt{gradientForest} are real species data from
a cross-shelf survey in the far northern Great Barrier Reef of northeast
Australia \citep{Poiner1998, Burridge2006}. Of $>1,000$ species
observed, a subset of 110 are included from 197 of the sites sampled. The
environmental data include 28 predictors, either measured at each site or
attributed to each site by interpolation \citep{Pitcher2002}.

<<c2, eval=TRUE,echo=TRUE,fig=FALSE>>= 
require(gradientForest)
# load the site by species matrix, object=Sp_mat
# includes transformed biomass of 110 species at 197 sites
load("GZ.sps.mat.Rdata") 
dim(Sp_mat)
# load the site physical data, object=Phys_site 
# includes 28 predictors at 197 sites
load("GZ.phys.site.Rdata") 
dim(Phys_site)
@

\subsection{\texttt{gradientForest} analysis} 

The function \texttt{gradientForest} is a wrapper function that calls \texttt{extendedForest}, a
modified version of \texttt{randomForest}, and collates its output across all the
species in the data matrix. The key modification in \texttt{extendedForest} extracts the
numerous tree split values along each predictor gradient and their associated
fit improvement, for each predictor in each tree, for the forests and returns
that information to \texttt{gradientForest}. 

Like \texttt{randomForest}, \texttt{extendedForest} assesses the importance of each variable for
prediction accuracy; information that is further collated and processed by
\texttt{gradientForest}. Often, predictor variables are correlated however. The
standard approach in random forests assesses marginal importance of predictor
by randomly permuting each predictor in turn, across all sites in the dataset,
and calculating the degradation prediction performance of each tree. Package
extendedForest can account for correlated predictors by implementing
conditional permutation \citep{Ellis2010}, following the strategy outlined
by \citet{Strobl2008}. In conditional permutation, the predictor to be
assessed is permuted only within blocks of the dataset defined by splits in the
given tree on any other predictors correlated above a certain threshold (e.g. 
$r= 0.5$) and up to a maximum number of splits set by the \texttt{maxLevel} option (if
required). 

<<c3, eval=TRUE,echo=TRUE,fig=FALSE>>= 
nSites <- dim(Sp_mat)[1]
nSpecs <- dim(Sp_mat)[2]
# set depth of conditional permutation
lev <- floor(log2(nSites*0.368/2))
lev 
@

The \texttt{gradientForest} may take several minutes to run. Other options that can be
set include the number of trees typically 500, whether the splits should be
compact into bins (advising to prevent memory problems for large datasets) and
the number of bins, and the correlation threshold for conditional permutation.
The summary shows the number of species with positive $R^2$ ie. those species that
could be predicted to any extent by the available predictor. The returned
object is a list containing the data, predictor importances, species $R^2$'s and
other information described in the html help pages under \texttt{Value}.

<<c4, eval=FALSE,echo=TRUE,fig=FALSE>>= 
gf <- gradientForest(cbind(Phys_site,Sp_mat), predictor.vars=colnames(Phys_site), response.vars=colnames(Sp_mat), ntree=500, transform = NULL, compact=T, nbin = 201, maxLevel=lev, corr.threshold=0.5) 
@
<<c4b, eval=TRUE,echo=FALSE,fig=FALSE>>= 
load("gf.Rdata") 
@
<<c4a, eval=TRUE,echo=TRUE,fig=FALSE>>= 
gf
names(gf)
@

\subsection{\texttt{gradientForest} plots} 
Several types of plots are available for the \texttt{gradientForest} object. The first
is the predictor overall importance plot. This show the mean accuracy
importance and the mean importance weighted by species $R^2$. in this example,
both are conditional importance. Seabed stress and sediment mud fraction are
clearly the most important variables across these 89 species. 
<<c5, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(gf,plot.type="O") 
@

The predictor gradient plots are best presented in order of importance; in this
example the top 25 predictors are presented in 5 by 5 panels.

<<c5, eval=TRUE,echo=TRUE,fig=FALSE>>= 
# get a sorted list of the top 1:n most important predictors
most_important <- names(importance(gf))[1:25]
par(mgp=c(2, 0.75, 0))
@

The second plot is the splits density plot (\texttt{plot.type="S"}), which shows binned
split importance and location on each gradient (spikes), kernel density of
splits ({\it black lines\/}), of observations ({\it red lines\/}) and of splits standardised by observations
density ({\it blue lines\/}). Each distribution integrates to predictor importance. These show
where important changes in the abundance of multiple species are occurring
along the gradient; they indicate a composition change rate. Many of the usual
plot options can be set in the call.

<<c6, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(gf, plot.type="S", imp.vars=most_important, leg.posn="topright", cex.legend=0.4, cex.axis=0.6, cex.lab=0.7, line.ylab=0.9, par.args=list(mgp=c(1.5, 0.5, 0), mar=c(3.1,1.5,0.1,1)))
@

The third plot is the species cumulative plot (\texttt{plot.type="C"}, \texttt{show.overall=F}),
which for each species shows cumulative importance distributions of splits
improvement scaled by $R^2$ weighted importance, and standardised by density of
observations. These show cumulative change in abundance of individual species,
where changes occur on the gradient, and the species changing most on each
gradient. Again many of the usual plot options can be set in the call; in this
example the legend identifies the top 5 most responsive species for each
predictor

<<c7, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(gf, plot.type="C", imp.vars=most_important, show.overall=F, legend=T, leg.posn="topleft", leg.nspecies=5, cex.lab=0.7, cex.legend=0.4, cex.axis=0.6, line.ylab=0.9, par.args=list(mgp=c(1.5, 0.5, 0), mar=c(2.5,1.0,0.1,0.5), omi=c(0,0.3,0,0)))
@

The fourth plot is the predictor cumulative plot (\texttt{plot.type="C"}, 
\texttt{show.species=F}), which for each predictor shows cumulative importance distributions of
splits improvement scaled by $R^2$ weighted importance, and standardised by
density of observations, averaged over all species. These show cumulative
change in overall composition of the community, where changes occur on the
gradient. Again many of the usual plot options can be set in the call; in this
example \texttt{common.scale=T} ensures that plots for all predictors have the same
y-scale as the most important predictor.

<<c8, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(gf, plot.type="C", imp.vars=most_important, show.species=F, common.scale=T, cex.axis=0.6, cex.lab=0.7, line.ylab=0.9, par.args=list(mgp=c(1.5, 0.5, 0), mar=c(2.5,1.0,0.1,0.5), omi=c(0,0.3,0,0)))
@

The fifth plot shows the $R^2$ measure of the fit of the random forest model for
each species, ordered in various ways. 

<<c9, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(gf, plot.type="P", show.names=F, horizontal=F, cex.axis=1, cex.labels=0.7, line=2.5)
@ 

Several other alternative formats of the $R^2$ fit performance plot are available,
e.g.:

<<c10, eval=FALSE,echo=TRUE,fig=FALSE>>= 
plot(gf, plot.type="P", show.names=T, horizontal=F, cex.axis=1, cex.labels=0.7, line=2.5)
plot(gf, plot.type="P", show.names=F, horizontal=T, cex.axis=1, cex.labels=0.6, line=2.5)
plot(gf, plot.type="P", show.names=T, horizontal=T, cex.axis=1, cex.labels=0.6, line=2.5)
@

\section{Gradient Forest predictions}
In addition to examining compositional change along environmental gradients,
the predictor cumulative functions can also be used to transform grid data
layers of environmental variables to a common biological importance scale. This
transformation of the multi-dimensional environment space is to a biological
space in which coordinate position represents composition associated with the
predictors. These inferred compositional patterns can be mapped in biological
space and geographic space in a manner analogous to ordination, but takes into
account the non-linear and sometimes threshold changes that occur along
gradients.

\subsection{Transforming predictors}
The example provided includes gridded environmental variables for a roughly 10,000 km${}^2$
area of the far northern Great Barrier Reef where the biological surveys were
conducted. The data include North and East coordinates plus 28 predictors at
8,682 grid cells. The grid data must include the same predictors with the same
names as sites included in the \texttt{gradientForest} call.

<<c11a, eval=TRUE,echo=TRUE,fig=FALSE>>= 
load("GZ.phys.grid.Rdata") 
@
<<c11, eval=TRUE,echo=TRUE,fig=FALSE>>= 
dim(Phys_grid) 
names(Phys_grid)
@

The grid variables are transformed using the \texttt{gradientForest} \texttt{predict} function.

<<c12, eval=TRUE,echo=TRUE,fig=FALSE>>= 
imp.vars <- names(importance(gf))
Trns_grid <- cbind(Phys_grid[,c("EAST","NORTH")], predict(gf,Phys_grid[,imp.vars])) 
@

It is useful to also transform the site environmental predictors, which are
available from \texttt{gf\$X}.

<<c13, eval=TRUE,echo=TRUE,fig=FALSE>>= 
Trns_site <- predict(gf) 
@

\subsection{Biplot of the biological space}
The multi-dimensional biological space can most effectively be represented by
taking the principle components of the transformed grid and presenting the
first two dimensions in a biplot. It must be acknowledged that while most
variation in patterns is captured by the first dimensions, additional
compositional pattern contained in the higher dimensions is not shown. A user
defined RGB colour palette is set up based on the first 3 dimensions. 
<<c14, eval=TRUE,echo=TRUE,fig=FALSE>>= 
PCs <- prcomp(Trns_grid[,imp.vars]) 
# ensure BSTRESS points to upper right quadrant
sgn <- sign(PCs$rotation["BSTRESS",]) 
PCs$rotation <- sweep(PCs$rotation,2,sgn,"*")
PCs$x <- sweep(PCs$x,2,sgn,"*")
 
# set up a colour palette for the mapping
a1 <- PCs$x[,1]
a2 <- PCs$x[,2]
a3 <- PCs$x[,3]
r <- a1+a2
g <- -a2
b <- a3+a2-a1
r <- (r-min(r)) / (max(r)-min(r)) * 255
g <- (g-min(g)) / (max(g)-min(g)) * 255
b <- (b-min(b)) / (max(b)-min(b)) * 255
@

The environmental variables may be shown as vectors, perhaps limited to the
most important predictors --- in this example, variables to show as vectors are
selected. 

<<c15, eval=TRUE,echo=TRUE,fig=FALSE>>= 
nvs <- dim(PCs$rotation)[1]  # number of variables
# choose predictor vectors to show
vec <- c("BSTRESS", "MUD", "SST_AV", "T_AV", "CHLA_AV", "SAND", "CRBNT", "GRAVEL") 
lv <- length(vec)
vind <- rownames(PCs$rotation) %in% vec

# choose a scaling factor to plot the vectors over the grid
scal <- 40 
xrng <- range(PCs$x[,1], PCs$rotation[,1]/scal)*1.1
yrng <- range(PCs$x[,2], PCs$rotation[,2]/scal)*1.1
plot((PCs$x[,1:2]), xlim=xrng, ylim=yrng, pch=".", cex=4, col=rgb(r,g,b, max = 255), asp=1)
# plot the other predictors with "+"
points(PCs$rotation[! vind,1:2]/scal, pch="+")  
# plot the chosen predictors as arrows
arrows(rep(0,lv), rep(0,lv), PCs$rotation[vec,1]/scal, PCs$rotation[vec,2]/scal, length = 0.0625) 
jit <- 0.0015
text(PCs$rotation[vec,1]/scal+jit*sign(PCs$rotation[vec,1]), PCs$rotation[vec,2]/scal+jit*sign(PCs$rotation[vec,2]), labels = vec)
@

Different coordinate positions in the biplot represent differing compositions,
as associated with the predictors. Further information may be added to the
biplot including the location of sites in biological space, the weight mean
location of species, and selected species may be identified interactively.

<<c16a, eval=TRUE,echo=FALSE,fig=TRUE>>= 
plot((PCs$x[,1:2]), xlim=xrng, ylim=yrng, pch=".", cex=4, col=rgb(r,g,b, max = 255), asp=1)
# plot the other predictors with "+"
points(PCs$rotation[! vind,1:2]/scal, pch="+")  
# plot the chosen predictors as arrows
arrows(rep(0,lv), rep(0,lv), PCs$rotation[vec,1]/scal, PCs$rotation[vec,2]/scal, length = 0.0625) 
jit <- 0.0015
text(PCs$rotation[vec,1]/scal+jit*sign(PCs$rotation[vec,1]), PCs$rotation[vec,2]/scal+jit*sign(PCs$rotation[vec,2]), labels = vec)
# first predict the PCs for the transformed site data
PCsites <- predict(PCs,Trns_site[,imp.vars])  
# plot all the sites as points on the biplot
points(PCsites[,1:2])
# calc & plot the weighted mean locations of species (from gf$Y) 
SpsWtd <- sweep(gf$Y,2,apply(gf$Y,2,min),"-")
SpsWtdPCs <- (t(SpsWtd) %*% (PCsites[,1:2]))/colSums(SpsWtd) 
points(SpsWtdPCs, col="red", pch="+") 
sp <- colnames(SpsWtd)[1]  
points(PCsites[,1:2], col="blue", cex=SpsWtd[,sp]/2)
@
<<c16, eval=FALSE,echo=TRUE,fig=FALSE>>= 
# first predict the PCs for the transformed site data
PCsites <- predict(PCs,Trns_site[,imp.vars])  
# plot all the sites as points on the biplot
points(PCsites[,1:2])
# calc & plot the weighted mean locations of species (from gf$Y) 
SpsWtd <- sweep(gf$Y,2,apply(gf$Y,2,min),"-")
SpsWtdPCs <- (t(SpsWtd) %*% (PCsites[,1:2]))/colSums(SpsWtd) 
points(SpsWtdPCs, col="red", pch="+") 
# interactively label some of the species, if desired
#identify(SpsWtdPCs, labels = as.character(rownames(SpsWtdPCs)), col="blue")  
@

If required, the abundance of any given species may be plotted on the biplot.
For example the first species from \texttt{gf\$Y} = \texttt{A1010102}, an alga from the family
Caulerpaceae that appears to prefer carbonate gravelly sand area with moderate
bedstress and lower temperature. 

<<c17, eval=TRUE,echo=TRUE,fig=FALSE>>= 
sp <- colnames(SpsWtd)[1]  
points(PCsites[,1:2], col="blue", cex=SpsWtd[,sp]/2)
@

Alternatively, specifically named examples could be plotted: e.g. \texttt{E4030373} a
Fungiid coral; \texttt{M2020101} a Strombid mollusc; or \texttt{S1010671} a Perophorid
ascidian to name a few.

\subsection{Mapping in geographic space}
The biplot and the colour palette in the previous section can be used as a key
to visualise compositional patterns mapped in geographic space. The following
map plots predicted PC scores in geographic coordinates, using the same colour
palette as above, and represents continuous changes in inferred compositional
patterns associated with the predictors. 

<<c18, eval=TRUE,echo=TRUE,fig=TRUE>>= 
plot(Trns_grid[,c("EAST","NORTH")],pch=".", cex=3, asp=1, col=rgb(r,g,b, max = 255))
@ 

\subsection{A clustered version}
Some applications may require a hard clustered output, representing inferred
assemblages, rather than a continuous representation of biodiversity
composition. The following example uses \texttt{clara} to make 8 clusters. 
This is a fast claustering algorithm suitable for large data sets.
The medoids are labelled and the colour key takes the
value for each medoid. Other clustering methods may be used (for example,
\texttt{pam} would take several minutes) as alternatives, and their various cluster
diagnostics may provide a guide to the appropriate numbers of clusters.

<<c19, eval=TRUE,echo=TRUE,fig=TRUE>>= 
require(cluster)
ncl <- 8 
clPCs <- clara(PCs$x,ncl,sampsize=1000) 
# get the medoid colour palette
medcolR <- r[clPCs$i.med]
medcolG <- g[clPCs$i.med]
medcolB <- b[clPCs$i.med]

# re-plot the biplot -- coloured by cluster medoids
plot((PCs$x[,1:2]), xlim=xrng, ylim=yrng,pch=".", cex=4, col=rgb(medcolR[clPCs$clustering], medcolG[clPCs$clustering], medcolB[clPCs$clustering],  max = 255), asp=1)
points(PCs$rotation[! vind,1:2]/scal, pch="+") 
arrows(rep(0,lv), rep(0,lv), PCs$rotation[vec,1]/scal, PCs$rotation[vec,2]/scal, length = 0.0625) 
text(PCs$rotation[vec,1]/scal+jit*sign(PCs$rotation[vec,1]), PCs$rotation[vec,2]/scal+jit*sign(PCs$rotation[vec,2]), labels = vec)
# plot the cluster medoids with ID number
text(clPCs$medoids[,1:2], labels = seq(1,ncl)) 
legend("bottomleft",as.character(seq(1,ncl)), pch=15, cex=1,col=rgb(medcolR,medcolG,medcolB, max = 255))
@ 

<<c20, eval=TRUE,echo=TRUE,fig=TRUE>>= 
# re-plot the map --- coloured by cluster medoids
plot(Trns_grid[,c("EAST","NORTH")],pch=".", cex=3, asp=1, col=rgb(medcolR[clPCs$clustering], medcolG[clPCs$clustering], medcolB[clPCs$clustering], max = 255))
points(Trns_grid[clPCs$i.med,c("EAST","NORTH")], pch=as.character(seq(1,ncl)))
legend("bottomleft",as.character(seq(1,ncl)), pch=15, cex=1, col=rgb(medcolR,medcolG,medcolB, max = 255))
@

\section{Session information}
\label{sec:sessinfo}
The simulation and output in this document were generated in the following
computing environment.
@
<<echo=FALSE,results=tex>>=
toLatex(sessionInfo())
@ %def

%The output of examples in this document were generated by running the source
%through \texttt{Sweave}, using \texttt{gradientForest} version 0.1-11, \texttt{extendedForest} version
%1.4, and R version 2.10.0 (2009-10-26).

\addcontentsline{toc}{section}{References}
\bibliographystyle{plainnat} \bibliography{biodiversity-survey}
\end{document}